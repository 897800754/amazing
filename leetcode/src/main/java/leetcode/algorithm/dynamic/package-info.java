/**
 * 动态规划
 * <p>
 * Subject_53
 * 解题思路:
 * /**
 * 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
 * <p>
 * 子数组 是数组中的一个连续部分。
 * [-2,1,-3,4,-1,2,1,-5,4]
 * <p>
 * (1)枚举子问题
 * 经过-2的最大连续子序列
 * 经过1的最大连续子序列
 * 经过-3的最大连续子序列
 * ....
 * 子问题转换
 * 以-2结尾的最大子序列之和
 * 以1结尾的最大子序列之和
 * 以-3结尾的最大子序列之和
 * <p>
 * <p>
 * (2)定义状态(定义子问题)
 * dp[i]：表示以 nums[i] 结尾 的 连续 子数组的最大和。
 * (3)状态转移方程
 * <p>
 * if(dp[i-1]>0) dp[i] =s'x dp[i-1]+num[i]
 * 或者
 * if(num[i-1]<0) dp[i] = num[i]
 * (4)dp数组(状态)初始化
 * dp[0]根据定义，只有 1 个数，一定以 nums[0] 结尾，因此 dp[0] = nums[0]。
 * (5)进一步思考是否有优化空间
 * 例如滚动变量法,代替状态数组,例如70题爬梯子问题
 * <p>
 * 什么是无后效性?
 * <p>
 * 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。
 * 这个条件也被叫做「无后效性」。换言之，动态规划对状态空间的遍历构成一张有向无环图，遍历就是该有向无环图的一个拓扑序。
 * 有向无环图中的节点对应问题中的「状态」，图中的边则对应状态之间的「转移」，转移的选取就是动态规划中的「决策」。
 *
 * @author: cg
 * @date: 2023-05-19 00:41
 **/
package leetcode.algorithm.dynamic;
